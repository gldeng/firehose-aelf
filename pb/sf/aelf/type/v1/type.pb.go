// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: sf/aelf/type/v1/type.proto

package pbaelf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutionStatus int32

const (
	ExecutionStatus_UNDEFINED ExecutionStatus = 0
	// Successful =>
	ExecutionStatus_EXECUTED ExecutionStatus = 1
	// Failed =>
	//
	//	Infrastructure reasons
	ExecutionStatus_CANCELED     ExecutionStatus = -1
	ExecutionStatus_SYSTEM_ERROR ExecutionStatus = -2
	// Contract reasons
	ExecutionStatus_CONTRACT_ERROR          ExecutionStatus = -10
	ExecutionStatus_EXCEEDED_MAX_CALL_DEPTH ExecutionStatus = -11
	// Pre-failed
	ExecutionStatus_PREFAILED ExecutionStatus = -99
	// Post-failed
	ExecutionStatus_POSTFAILED ExecutionStatus = -199
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0:    "UNDEFINED",
		1:    "EXECUTED",
		-1:   "CANCELED",
		-2:   "SYSTEM_ERROR",
		-10:  "CONTRACT_ERROR",
		-11:  "EXCEEDED_MAX_CALL_DEPTH",
		-99:  "PREFAILED",
		-199: "POSTFAILED",
	}
	ExecutionStatus_value = map[string]int32{
		"UNDEFINED":               0,
		"EXECUTED":                1,
		"CANCELED":                -1,
		"SYSTEM_ERROR":            -2,
		"CONTRACT_ERROR":          -10,
		"EXCEEDED_MAX_CALL_DEPTH": -11,
		"PREFAILED":               -99,
		"POSTFAILED":              -199,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_aelf_type_v1_type_proto_enumTypes[0].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_sf_aelf_type_v1_type_proto_enumTypes[0]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           int32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockHash         string              `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height            int64               `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Header            *BlockHeader        `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	TransactionTraces []*TransactionTrace `protobuf:"bytes,5,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Block) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Block) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

type TransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  string  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	RawTransaction []byte  `protobuf:"bytes,2,opt,name=raw_transaction,json=rawTransaction,proto3" json:"raw_transaction,omitempty"`
	Signature      []byte  `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Calls          []*Call `protobuf:"bytes,4,rep,name=calls,proto3" json:"calls,omitempty"`
	MainCallIndex  int32   `protobuf:"varint,5,opt,name=main_call_index,json=mainCallIndex,proto3" json:"main_call_index,omitempty"`
}

func (x *TransactionTrace) Reset() {
	*x = TransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTrace) ProtoMessage() {}

func (x *TransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTrace.ProtoReflect.Descriptor instead.
func (*TransactionTrace) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionTrace) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionTrace) GetRawTransaction() []byte {
	if x != nil {
		return x.RawTransaction
	}
	return nil
}

func (x *TransactionTrace) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TransactionTrace) GetCalls() []*Call {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *TransactionTrace) GetMainCallIndex() int32 {
	if x != nil {
		return x.MainCallIndex
	}
	return 0
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction id format <root_tx_id>:(pre/post:)1:1:1
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// sub transactions are `:(pre/post:)1:1:1`
	CallPath string `protobuf:"bytes,2,opt,name=call_path,json=callPath,proto3" json:"call_path,omitempty"`
	// The height of the referenced block hash.
	RefBlockNumber int64 `protobuf:"varint,3,opt,name=ref_block_number,json=refBlockNumber,proto3" json:"ref_block_number,omitempty"`
	// The first four bytes of the referenced block hash.
	RefBlockPrefix  string                        `protobuf:"bytes,4,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	From            string                        `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To              string                        `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	MethodName      string                        `protobuf:"bytes,7,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Params          []byte                        `protobuf:"bytes,8,opt,name=params,proto3" json:"params,omitempty"`
	ExecutionStatus ExecutionStatus               `protobuf:"varint,9,opt,name=execution_status,json=executionStatus,proto3,enum=sf.aelf.type.v1.ExecutionStatus" json:"execution_status,omitempty"`
	ReturnValue     []byte                        `protobuf:"bytes,10,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	Error           string                        `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	StateSet        *TransactionExecutingStateSet `protobuf:"bytes,12,opt,name=state_set,json=stateSet,proto3" json:"state_set,omitempty"`
	Logs            []*LogEvent                   `protobuf:"bytes,13,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *Call) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Call) GetCallPath() string {
	if x != nil {
		return x.CallPath
	}
	return ""
}

func (x *Call) GetRefBlockNumber() int64 {
	if x != nil {
		return x.RefBlockNumber
	}
	return 0
}

func (x *Call) GetRefBlockPrefix() string {
	if x != nil {
		return x.RefBlockPrefix
	}
	return ""
}

func (x *Call) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Call) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Call) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *Call) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Call) GetExecutionStatus() ExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return ExecutionStatus_UNDEFINED
}

func (x *Call) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *Call) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Call) GetStateSet() *TransactionExecutingStateSet {
	if x != nil {
		return x.StateSet
	}
	return nil
}

func (x *Call) GetLogs() []*LogEvent {
	if x != nil {
		return x.Logs
	}
	return nil
}

type TransactionExecutingStateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The changed states.
	Writes map[string][]byte `protobuf:"bytes,1,rep,name=writes,proto3" json:"writes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The read states.
	Reads map[string]bool `protobuf:"bytes,2,rep,name=reads,proto3" json:"reads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The deleted states.
	Deletes map[string]bool `protobuf:"bytes,3,rep,name=deletes,proto3" json:"deletes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TransactionExecutingStateSet) Reset() {
	*x = TransactionExecutingStateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExecutingStateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExecutingStateSet) ProtoMessage() {}

func (x *TransactionExecutingStateSet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExecutingStateSet.ProtoReflect.Descriptor instead.
func (*TransactionExecutingStateSet) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionExecutingStateSet) GetWrites() map[string][]byte {
	if x != nil {
		return x.Writes
	}
	return nil
}

func (x *TransactionExecutingStateSet) GetReads() map[string]bool {
	if x != nil {
		return x.Reads
	}
	return nil
}

func (x *TransactionExecutingStateSet) GetDeletes() map[string]bool {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contract address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The name of the log event.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The indexed data, used to calculate bloom.
	Indexed [][]byte `protobuf:"bytes,3,rep,name=indexed,proto3" json:"indexed,omitempty"`
	// The non indexed data.
	NonIndexed []byte `protobuf:"bytes,4,opt,name=non_indexed,json=nonIndexed,proto3" json:"non_indexed,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *LogEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LogEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogEvent) GetIndexed() [][]byte {
	if x != nil {
		return x.Indexed
	}
	return nil
}

func (x *LogEvent) GetNonIndexed() []byte {
	if x != nil {
		return x.NonIndexed
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                           int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainId                           int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PreviousBlockHash                 string                 `protobuf:"bytes,3,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleTreeRootOfTransactions      string                 `protobuf:"bytes,4,opt,name=merkle_tree_root_of_transactions,json=merkleTreeRootOfTransactions,proto3" json:"merkle_tree_root_of_transactions,omitempty"`
	MerkleTreeRootOfWorldState        string                 `protobuf:"bytes,5,opt,name=merkle_tree_root_of_world_state,json=merkleTreeRootOfWorldState,proto3" json:"merkle_tree_root_of_world_state,omitempty"`
	Bloom                             []byte                 `protobuf:"bytes,6,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Height                            int64                  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	ExtraData                         map[string][]byte      `protobuf:"bytes,8,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Time                              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	MerkleTreeRootOfTransactionStatus string                 `protobuf:"bytes,10,opt,name=merkle_tree_root_of_transaction_status,json=merkleTreeRootOfTransactionStatus,proto3" json:"merkle_tree_root_of_transaction_status,omitempty"`
	SignerPubkey                      []byte                 `protobuf:"bytes,9999,opt,name=signer_pubkey,json=signerPubkey,proto3" json:"signer_pubkey,omitempty"`
	Signature                         []byte                 `protobuf:"bytes,10000,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_aelf_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_aelf_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sf_aelf_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BlockHeader) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *BlockHeader) GetMerkleTreeRootOfTransactions() string {
	if x != nil {
		return x.MerkleTreeRootOfTransactions
	}
	return ""
}

func (x *BlockHeader) GetMerkleTreeRootOfWorldState() string {
	if x != nil {
		return x.MerkleTreeRootOfWorldState
	}
	return ""
}

func (x *BlockHeader) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *BlockHeader) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetExtraData() map[string][]byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *BlockHeader) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BlockHeader) GetMerkleTreeRootOfTransactionStatus() string {
	if x != nil {
		return x.MerkleTreeRootOfTransactionStatus
	}
	return ""
}

func (x *BlockHeader) GetSignerPubkey() []byte {
	if x != nil {
		return x.SignerPubkey
	}
	return nil
}

func (x *BlockHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_sf_aelf_type_v1_type_proto protoreflect.FileDescriptor

var file_sf_aelf_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x66, 0x2f, 0x61, 0x65, 0x6c, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x66,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0,
	0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xfc, 0x03, 0x0a, 0x04, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x1c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x22, 0xff, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a,
	0x20, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x26, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3c, 0x0a, 0x0e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xd4, 0x01, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x08, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a,
	0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x16, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x9d, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69,
	0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61, 0x65, 0x6c, 0x66, 0x2f, 0x70, 0x62, 0x2f, 0x73,
	0x66, 0x2f, 0x61, 0x65, 0x6c, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x62, 0x61, 0x65, 0x6c, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_aelf_type_v1_type_proto_rawDescOnce sync.Once
	file_sf_aelf_type_v1_type_proto_rawDescData = file_sf_aelf_type_v1_type_proto_rawDesc
)

func file_sf_aelf_type_v1_type_proto_rawDescGZIP() []byte {
	file_sf_aelf_type_v1_type_proto_rawDescOnce.Do(func() {
		file_sf_aelf_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_aelf_type_v1_type_proto_rawDescData)
	})
	return file_sf_aelf_type_v1_type_proto_rawDescData
}

var file_sf_aelf_type_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sf_aelf_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sf_aelf_type_v1_type_proto_goTypes = []any{
	(ExecutionStatus)(0),                 // 0: sf.aelf.type.v1.ExecutionStatus
	(*Block)(nil),                        // 1: sf.aelf.type.v1.Block
	(*TransactionTrace)(nil),             // 2: sf.aelf.type.v1.TransactionTrace
	(*Call)(nil),                         // 3: sf.aelf.type.v1.Call
	(*TransactionExecutingStateSet)(nil), // 4: sf.aelf.type.v1.TransactionExecutingStateSet
	(*LogEvent)(nil),                     // 5: sf.aelf.type.v1.LogEvent
	(*BlockHeader)(nil),                  // 6: sf.aelf.type.v1.BlockHeader
	nil,                                  // 7: sf.aelf.type.v1.TransactionExecutingStateSet.WritesEntry
	nil,                                  // 8: sf.aelf.type.v1.TransactionExecutingStateSet.ReadsEntry
	nil,                                  // 9: sf.aelf.type.v1.TransactionExecutingStateSet.DeletesEntry
	nil,                                  // 10: sf.aelf.type.v1.BlockHeader.ExtraDataEntry
	(*timestamppb.Timestamp)(nil),        // 11: google.protobuf.Timestamp
}
var file_sf_aelf_type_v1_type_proto_depIdxs = []int32{
	6,  // 0: sf.aelf.type.v1.Block.header:type_name -> sf.aelf.type.v1.BlockHeader
	2,  // 1: sf.aelf.type.v1.Block.transaction_traces:type_name -> sf.aelf.type.v1.TransactionTrace
	3,  // 2: sf.aelf.type.v1.TransactionTrace.calls:type_name -> sf.aelf.type.v1.Call
	0,  // 3: sf.aelf.type.v1.Call.execution_status:type_name -> sf.aelf.type.v1.ExecutionStatus
	4,  // 4: sf.aelf.type.v1.Call.state_set:type_name -> sf.aelf.type.v1.TransactionExecutingStateSet
	5,  // 5: sf.aelf.type.v1.Call.logs:type_name -> sf.aelf.type.v1.LogEvent
	7,  // 6: sf.aelf.type.v1.TransactionExecutingStateSet.writes:type_name -> sf.aelf.type.v1.TransactionExecutingStateSet.WritesEntry
	8,  // 7: sf.aelf.type.v1.TransactionExecutingStateSet.reads:type_name -> sf.aelf.type.v1.TransactionExecutingStateSet.ReadsEntry
	9,  // 8: sf.aelf.type.v1.TransactionExecutingStateSet.deletes:type_name -> sf.aelf.type.v1.TransactionExecutingStateSet.DeletesEntry
	10, // 9: sf.aelf.type.v1.BlockHeader.extra_data:type_name -> sf.aelf.type.v1.BlockHeader.ExtraDataEntry
	11, // 10: sf.aelf.type.v1.BlockHeader.time:type_name -> google.protobuf.Timestamp
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_sf_aelf_type_v1_type_proto_init() }
func file_sf_aelf_type_v1_type_proto_init() {
	if File_sf_aelf_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_aelf_type_v1_type_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_aelf_type_v1_type_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_aelf_type_v1_type_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_aelf_type_v1_type_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionExecutingStateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_aelf_type_v1_type_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_aelf_type_v1_type_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_aelf_type_v1_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_aelf_type_v1_type_proto_goTypes,
		DependencyIndexes: file_sf_aelf_type_v1_type_proto_depIdxs,
		EnumInfos:         file_sf_aelf_type_v1_type_proto_enumTypes,
		MessageInfos:      file_sf_aelf_type_v1_type_proto_msgTypes,
	}.Build()
	File_sf_aelf_type_v1_type_proto = out.File
	file_sf_aelf_type_v1_type_proto_rawDesc = nil
	file_sf_aelf_type_v1_type_proto_goTypes = nil
	file_sf_aelf_type_v1_type_proto_depIdxs = nil
}
