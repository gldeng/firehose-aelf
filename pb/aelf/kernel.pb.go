// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: aelf/kernel.proto

package aelf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionStatus int32

const (
	TransactionStatus_UNKNOWN_TRANSACTION_STATUS TransactionStatus = 0
	TransactionStatus_TRANSACTION_EXECUTING      TransactionStatus = 1
	TransactionStatus_TRANSACTION_EXECUTED       TransactionStatus = 2
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "UNKNOWN_TRANSACTION_STATUS",
		1: "TRANSACTION_EXECUTING",
		2: "TRANSACTION_EXECUTED",
	}
	TransactionStatus_value = map[string]int32{
		"UNKNOWN_TRANSACTION_STATUS": 0,
		"TRANSACTION_EXECUTING":      1,
		"TRANSACTION_EXECUTED":       2,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aelf_kernel_proto_enumTypes[0].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_aelf_kernel_proto_enumTypes[0]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{0}
}

// For failed transactions, its status follows the Min of
// its own status and its inline transactions'
type ExecutionStatus int32

const (
	ExecutionStatus_UNDEFINED ExecutionStatus = 0
	// Successful =>
	ExecutionStatus_EXECUTED ExecutionStatus = 1
	// Failed =>
	//
	//	Infrastructure reasons
	ExecutionStatus_CANCELED     ExecutionStatus = -1
	ExecutionStatus_SYSTEM_ERROR ExecutionStatus = -2
	// Contract reasons
	ExecutionStatus_CONTRACT_ERROR          ExecutionStatus = -10
	ExecutionStatus_EXCEEDED_MAX_CALL_DEPTH ExecutionStatus = -11
	// Pre-failed
	ExecutionStatus_PREFAILED ExecutionStatus = -99
	// Post-failed
	ExecutionStatus_POSTFAILED ExecutionStatus = -199
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0:    "UNDEFINED",
		1:    "EXECUTED",
		-1:   "CANCELED",
		-2:   "SYSTEM_ERROR",
		-10:  "CONTRACT_ERROR",
		-11:  "EXCEEDED_MAX_CALL_DEPTH",
		-99:  "PREFAILED",
		-199: "POSTFAILED",
	}
	ExecutionStatus_value = map[string]int32{
		"UNDEFINED":               0,
		"EXECUTED":                1,
		"CANCELED":                -1,
		"SYSTEM_ERROR":            -2,
		"CONTRACT_ERROR":          -10,
		"EXCEEDED_MAX_CALL_DEPTH": -11,
		"PREFAILED":               -99,
		"POSTFAILED":              -199,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aelf_kernel_proto_enumTypes[1].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_aelf_kernel_proto_enumTypes[1]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{1}
}

type ChainStateMergingStatus int32

const (
	ChainStateMergingStatus_COMMON  ChainStateMergingStatus = 0
	ChainStateMergingStatus_MERGING ChainStateMergingStatus = 1
	ChainStateMergingStatus_MERGED  ChainStateMergingStatus = 2
)

// Enum value maps for ChainStateMergingStatus.
var (
	ChainStateMergingStatus_name = map[int32]string{
		0: "COMMON",
		1: "MERGING",
		2: "MERGED",
	}
	ChainStateMergingStatus_value = map[string]int32{
		"COMMON":  0,
		"MERGING": 1,
		"MERGED":  2,
	}
)

func (x ChainStateMergingStatus) Enum() *ChainStateMergingStatus {
	p := new(ChainStateMergingStatus)
	*p = x
	return p
}

func (x ChainStateMergingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainStateMergingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aelf_kernel_proto_enumTypes[2].Descriptor()
}

func (ChainStateMergingStatus) Type() protoreflect.EnumType {
	return &file_aelf_kernel_proto_enumTypes[2]
}

func (x ChainStateMergingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainStateMergingStatus.Descriptor instead.
func (ChainStateMergingStatus) EnumDescriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{2}
}

type ChainBlockLinkExecutionStatus int32

const (
	ChainBlockLinkExecutionStatus_EXECUTION_NONE    ChainBlockLinkExecutionStatus = 0
	ChainBlockLinkExecutionStatus_EXECUTION_SUCCESS ChainBlockLinkExecutionStatus = 1
	ChainBlockLinkExecutionStatus_EXECUTION_FAILED  ChainBlockLinkExecutionStatus = 2
)

// Enum value maps for ChainBlockLinkExecutionStatus.
var (
	ChainBlockLinkExecutionStatus_name = map[int32]string{
		0: "EXECUTION_NONE",
		1: "EXECUTION_SUCCESS",
		2: "EXECUTION_FAILED",
	}
	ChainBlockLinkExecutionStatus_value = map[string]int32{
		"EXECUTION_NONE":    0,
		"EXECUTION_SUCCESS": 1,
		"EXECUTION_FAILED":  2,
	}
)

func (x ChainBlockLinkExecutionStatus) Enum() *ChainBlockLinkExecutionStatus {
	p := new(ChainBlockLinkExecutionStatus)
	*p = x
	return p
}

func (x ChainBlockLinkExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainBlockLinkExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aelf_kernel_proto_enumTypes[3].Descriptor()
}

func (ChainBlockLinkExecutionStatus) Type() protoreflect.EnumType {
	return &file_aelf_kernel_proto_enumTypes[3]
}

func (x ChainBlockLinkExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainBlockLinkExecutionStatus.Descriptor instead.
func (ChainBlockLinkExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{3}
}

type StateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentValue  []byte `protobuf:"bytes,1,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	OriginalValue []byte `protobuf:"bytes,2,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
}

func (x *StateValue) Reset() {
	*x = StateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateValue) ProtoMessage() {}

func (x *StateValue) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateValue.ProtoReflect.Descriptor instead.
func (*StateValue) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{0}
}

func (x *StateValue) GetCurrentValue() []byte {
	if x != nil {
		return x.CurrentValue
	}
	return nil
}

func (x *StateValue) GetOriginalValue() []byte {
	if x != nil {
		return x.OriginalValue
	}
	return nil
}

type StateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatePath  *StatePath  `protobuf:"bytes,1,opt,name=state_path,json=statePath,proto3" json:"state_path,omitempty"`
	StateValue *StateValue `protobuf:"bytes,2,opt,name=state_value,json=stateValue,proto3" json:"state_value,omitempty"`
}

func (x *StateChange) Reset() {
	*x = StateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChange) ProtoMessage() {}

func (x *StateChange) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChange.ProtoReflect.Descriptor instead.
func (*StateChange) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{1}
}

func (x *StateChange) GetStatePath() *StatePath {
	if x != nil {
		return x.StatePath
	}
	return nil
}

func (x *StateChange) GetStateValue() *StateValue {
	if x != nil {
		return x.StateValue
	}
	return nil
}

type TransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId      *Hash                         `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ReturnValue        []byte                        `protobuf:"bytes,2,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	Error              string                        `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PreTransactions    []*Transaction                `protobuf:"bytes,4,rep,name=pre_transactions,json=preTransactions,proto3" json:"pre_transactions,omitempty"`
	PreTraces          []*TransactionTrace           `protobuf:"bytes,5,rep,name=pre_traces,json=preTraces,proto3" json:"pre_traces,omitempty"`
	InlineTransactions []*Transaction                `protobuf:"bytes,6,rep,name=inline_transactions,json=inlineTransactions,proto3" json:"inline_transactions,omitempty"`
	InlineTraces       []*TransactionTrace           `protobuf:"bytes,7,rep,name=inline_traces,json=inlineTraces,proto3" json:"inline_traces,omitempty"`
	PostTransactions   []*Transaction                `protobuf:"bytes,8,rep,name=post_transactions,json=postTransactions,proto3" json:"post_transactions,omitempty"`
	PostTraces         []*TransactionTrace           `protobuf:"bytes,9,rep,name=post_traces,json=postTraces,proto3" json:"post_traces,omitempty"`
	Logs               []*LogEvent                   `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	Elapsed            int64                         `protobuf:"varint,11,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	ExecutionStatus    ExecutionStatus               `protobuf:"varint,12,opt,name=execution_status,json=executionStatus,proto3,enum=aelf.ExecutionStatus" json:"execution_status,omitempty"`
	StateSet           *TransactionExecutingStateSet `protobuf:"bytes,13,opt,name=state_set,json=stateSet,proto3" json:"state_set,omitempty"`
}

func (x *TransactionTrace) Reset() {
	*x = TransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTrace) ProtoMessage() {}

func (x *TransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTrace.ProtoReflect.Descriptor instead.
func (*TransactionTrace) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionTrace) GetTransactionId() *Hash {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionTrace) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *TransactionTrace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TransactionTrace) GetPreTransactions() []*Transaction {
	if x != nil {
		return x.PreTransactions
	}
	return nil
}

func (x *TransactionTrace) GetPreTraces() []*TransactionTrace {
	if x != nil {
		return x.PreTraces
	}
	return nil
}

func (x *TransactionTrace) GetInlineTransactions() []*Transaction {
	if x != nil {
		return x.InlineTransactions
	}
	return nil
}

func (x *TransactionTrace) GetInlineTraces() []*TransactionTrace {
	if x != nil {
		return x.InlineTraces
	}
	return nil
}

func (x *TransactionTrace) GetPostTransactions() []*Transaction {
	if x != nil {
		return x.PostTransactions
	}
	return nil
}

func (x *TransactionTrace) GetPostTraces() []*TransactionTrace {
	if x != nil {
		return x.PostTraces
	}
	return nil
}

func (x *TransactionTrace) GetLogs() []*LogEvent {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TransactionTrace) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *TransactionTrace) GetExecutionStatus() ExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return ExecutionStatus_UNDEFINED
}

func (x *TransactionTrace) GetStateSet() *TransactionExecutingStateSet {
	if x != nil {
		return x.StateSet
	}
	return nil
}

type ExecutionReturnSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId     *Hash                   `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Status            TransactionResultStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aelf.TransactionResultStatus" json:"status,omitempty"`
	StateChanges      map[string][]byte       `protobuf:"bytes,3,rep,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StateAccesses     map[string]bool         `protobuf:"bytes,4,rep,name=state_accesses,json=stateAccesses,proto3" json:"state_accesses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Bloom             []byte                  `protobuf:"bytes,5,opt,name=bloom,proto3" json:"bloom,omitempty"`
	ReturnValue       []byte                  `protobuf:"bytes,6,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	StateDeletes      map[string]bool         `protobuf:"bytes,7,rep,name=state_deletes,json=stateDeletes,proto3" json:"state_deletes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TransactionResult *TransactionResult      `protobuf:"bytes,8,opt,name=transaction_result,json=transactionResult,proto3" json:"transaction_result,omitempty"`
}

func (x *ExecutionReturnSet) Reset() {
	*x = ExecutionReturnSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionReturnSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReturnSet) ProtoMessage() {}

func (x *ExecutionReturnSet) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReturnSet.ProtoReflect.Descriptor instead.
func (*ExecutionReturnSet) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionReturnSet) GetTransactionId() *Hash {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ExecutionReturnSet) GetStatus() TransactionResultStatus {
	if x != nil {
		return x.Status
	}
	return TransactionResultStatus_NOT_EXISTED
}

func (x *ExecutionReturnSet) GetStateChanges() map[string][]byte {
	if x != nil {
		return x.StateChanges
	}
	return nil
}

func (x *ExecutionReturnSet) GetStateAccesses() map[string]bool {
	if x != nil {
		return x.StateAccesses
	}
	return nil
}

func (x *ExecutionReturnSet) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *ExecutionReturnSet) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *ExecutionReturnSet) GetStateDeletes() map[string]bool {
	if x != nil {
		return x.StateDeletes
	}
	return nil
}

func (x *ExecutionReturnSet) GetTransactionResult() *TransactionResult {
	if x != nil {
		return x.TransactionResult
	}
	return nil
}

type BlockHeaderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*BlockHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *BlockHeaderList) Reset() {
	*x = BlockHeaderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderList) ProtoMessage() {}

func (x *BlockHeaderList) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderList.ProtoReflect.Descriptor instead.
func (*BlockHeaderList) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{4}
}

func (x *BlockHeaderList) GetHeaders() []*BlockHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                           int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainId                           int32                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PreviousBlockHash                 *Hash                  `protobuf:"bytes,3,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleTreeRootOfTransactions      *Hash                  `protobuf:"bytes,4,opt,name=merkle_tree_root_of_transactions,json=merkleTreeRootOfTransactions,proto3" json:"merkle_tree_root_of_transactions,omitempty"`
	MerkleTreeRootOfWorldState        *Hash                  `protobuf:"bytes,5,opt,name=merkle_tree_root_of_world_state,json=merkleTreeRootOfWorldState,proto3" json:"merkle_tree_root_of_world_state,omitempty"`
	Bloom                             []byte                 `protobuf:"bytes,6,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Height                            int64                  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	ExtraData                         map[string][]byte      `protobuf:"bytes,8,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Time                              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	MerkleTreeRootOfTransactionStatus *Hash                  `protobuf:"bytes,10,opt,name=merkle_tree_root_of_transaction_status,json=merkleTreeRootOfTransactionStatus,proto3" json:"merkle_tree_root_of_transaction_status,omitempty"`
	SignerPubkey                      []byte                 `protobuf:"bytes,9999,opt,name=signer_pubkey,json=signerPubkey,proto3" json:"signer_pubkey,omitempty"`
	Signature                         []byte                 `protobuf:"bytes,10000,opt,name=signature,proto3" json:"signature,omitempty"`
	CachedBlockHash                   *Hash                  `protobuf:"bytes,10001,opt,name=cached_block_hash,json=cachedBlockHash,proto3" json:"cached_block_hash,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BlockHeader) GetPreviousBlockHash() *Hash {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *BlockHeader) GetMerkleTreeRootOfTransactions() *Hash {
	if x != nil {
		return x.MerkleTreeRootOfTransactions
	}
	return nil
}

func (x *BlockHeader) GetMerkleTreeRootOfWorldState() *Hash {
	if x != nil {
		return x.MerkleTreeRootOfWorldState
	}
	return nil
}

func (x *BlockHeader) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *BlockHeader) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetExtraData() map[string][]byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *BlockHeader) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BlockHeader) GetMerkleTreeRootOfTransactionStatus() *Hash {
	if x != nil {
		return x.MerkleTreeRootOfTransactionStatus
	}
	return nil
}

func (x *BlockHeader) GetSignerPubkey() []byte {
	if x != nil {
		return x.SignerPubkey
	}
	return nil
}

func (x *BlockHeader) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BlockHeader) GetCachedBlockHash() *Hash {
	if x != nil {
		return x.CachedBlockHash
	}
	return nil
}

type FirehoseBlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions       []*Transaction       `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TrasanctionResults []*TransactionResult `protobuf:"bytes,2,rep,name=trasanction_results,json=trasanctionResults,proto3" json:"trasanction_results,omitempty"`
	TransactionTraces  []*TransactionTrace  `protobuf:"bytes,3,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
}

func (x *FirehoseBlockBody) Reset() {
	*x = FirehoseBlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirehoseBlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirehoseBlockBody) ProtoMessage() {}

func (x *FirehoseBlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirehoseBlockBody.ProtoReflect.Descriptor instead.
func (*FirehoseBlockBody) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{6}
}

func (x *FirehoseBlockBody) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *FirehoseBlockBody) GetTrasanctionResults() []*TransactionResult {
	if x != nil {
		return x.TrasanctionResults
	}
	return nil
}

func (x *FirehoseBlockBody) GetTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

type BlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionIds []*Hash `protobuf:"bytes,1,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
}

func (x *BlockBody) Reset() {
	*x = BlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBody) ProtoMessage() {}

func (x *BlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBody.ProtoReflect.Descriptor instead.
func (*BlockBody) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{7}
}

func (x *BlockBody) GetTransactionIds() []*Hash {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body         *BlockBody         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	FirehoseBody *FirehoseBlockBody `protobuf:"bytes,7001,opt,name=firehose_body,json=firehoseBody,proto3" json:"firehose_body,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{8}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetBody() *BlockBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Block) GetFirehoseBody() *FirehoseBlockBody {
	if x != nil {
		return x.FirehoseBody
	}
	return nil
}

type VersionedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value           []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	BlockHeight     int64  `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash       *Hash  `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	OriginBlockHash *Hash  `protobuf:"bytes,5,opt,name=origin_block_hash,json=originBlockHash,proto3" json:"origin_block_hash,omitempty"`
}

func (x *VersionedState) Reset() {
	*x = VersionedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedState) ProtoMessage() {}

func (x *VersionedState) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedState.ProtoReflect.Descriptor instead.
func (*VersionedState) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{9}
}

func (x *VersionedState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VersionedState) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VersionedState) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *VersionedState) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *VersionedState) GetOriginBlockHash() *Hash {
	if x != nil {
		return x.OriginBlockHash
	}
	return nil
}

type BlockStateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash         *Hash             `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PreviousHash      *Hash             `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	BlockHeight       int64             `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Changes           map[string][]byte `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deletes           []string          `protobuf:"bytes,5,rep,name=deletes,proto3" json:"deletes,omitempty"`
	BlockExecutedData map[string][]byte `protobuf:"bytes,6,rep,name=block_executed_data,json=blockExecutedData,proto3" json:"block_executed_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockStateSet) Reset() {
	*x = BlockStateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStateSet) ProtoMessage() {}

func (x *BlockStateSet) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStateSet.ProtoReflect.Descriptor instead.
func (*BlockStateSet) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{10}
}

func (x *BlockStateSet) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockStateSet) GetPreviousHash() *Hash {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *BlockStateSet) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockStateSet) GetChanges() map[string][]byte {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *BlockStateSet) GetDeletes() []string {
	if x != nil {
		return x.Deletes
	}
	return nil
}

func (x *BlockStateSet) GetBlockExecutedData() map[string][]byte {
	if x != nil {
		return x.BlockExecutedData
	}
	return nil
}

type ChainStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId          int32                   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlockHash        *Hash                   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight      int64                   `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	MergingBlockHash *Hash                   `protobuf:"bytes,4,opt,name=merging_block_hash,json=mergingBlockHash,proto3" json:"merging_block_hash,omitempty"`
	Status           ChainStateMergingStatus `protobuf:"varint,5,opt,name=status,proto3,enum=aelf.ChainStateMergingStatus" json:"status,omitempty"`
}

func (x *ChainStateInfo) Reset() {
	*x = ChainStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStateInfo) ProtoMessage() {}

func (x *ChainStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStateInfo.ProtoReflect.Descriptor instead.
func (*ChainStateInfo) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{11}
}

func (x *ChainStateInfo) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainStateInfo) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ChainStateInfo) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ChainStateInfo) GetMergingBlockHash() *Hash {
	if x != nil {
		return x.MergingBlockHash
	}
	return nil
}

func (x *ChainStateInfo) GetStatus() ChainStateMergingStatus {
	if x != nil {
		return x.Status
	}
	return ChainStateMergingStatus_COMMON
}

type ChainBlockLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash           *Hash                         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height              int64                         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	PreviousBlockHash   *Hash                         `protobuf:"bytes,3,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	ExecutionStatus     ChainBlockLinkExecutionStatus `protobuf:"varint,4,opt,name=execution_status,json=executionStatus,proto3,enum=aelf.ChainBlockLinkExecutionStatus" json:"execution_status,omitempty"`
	IsIrreversibleBlock bool                          `protobuf:"varint,5,opt,name=is_irreversible_block,json=isIrreversibleBlock,proto3" json:"is_irreversible_block,omitempty"`
	IsLinked            bool                          `protobuf:"varint,6,opt,name=is_linked,json=isLinked,proto3" json:"is_linked,omitempty"`
	IsLightBlock        bool                          `protobuf:"varint,7,opt,name=is_light_block,json=isLightBlock,proto3" json:"is_light_block,omitempty"` //no block body
}

func (x *ChainBlockLink) Reset() {
	*x = ChainBlockLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainBlockLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainBlockLink) ProtoMessage() {}

func (x *ChainBlockLink) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainBlockLink.ProtoReflect.Descriptor instead.
func (*ChainBlockLink) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{12}
}

func (x *ChainBlockLink) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ChainBlockLink) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChainBlockLink) GetPreviousBlockHash() *Hash {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *ChainBlockLink) GetExecutionStatus() ChainBlockLinkExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return ChainBlockLinkExecutionStatus_EXECUTION_NONE
}

func (x *ChainBlockLink) GetIsIrreversibleBlock() bool {
	if x != nil {
		return x.IsIrreversibleBlock
	}
	return false
}

func (x *ChainBlockLink) GetIsLinked() bool {
	if x != nil {
		return x.IsLinked
	}
	return false
}

func (x *ChainBlockLink) GetIsLightBlock() bool {
	if x != nil {
		return x.IsLightBlock
	}
	return false
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GenesisBlockHash            *Hash             `protobuf:"bytes,2,opt,name=genesis_block_hash,json=genesisBlockHash,proto3" json:"genesis_block_hash,omitempty"`
	LongestChainHash            *Hash             `protobuf:"bytes,3,opt,name=longest_chain_hash,json=longestChainHash,proto3" json:"longest_chain_hash,omitempty"`
	LongestChainHeight          int64             `protobuf:"varint,4,opt,name=longest_chain_height,json=longestChainHeight,proto3" json:"longest_chain_height,omitempty"`
	Branches                    map[string]int64  `protobuf:"bytes,5,rep,name=branches,proto3" json:"branches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NotLinkedBlocks             map[string]string `protobuf:"bytes,6,rep,name=not_linked_blocks,json=notLinkedBlocks,proto3" json:"not_linked_blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastIrreversibleBlockHash   *Hash             `protobuf:"bytes,7,opt,name=last_irreversible_block_hash,json=lastIrreversibleBlockHash,proto3" json:"last_irreversible_block_hash,omitempty"`
	LastIrreversibleBlockHeight int64             `protobuf:"varint,8,opt,name=last_irreversible_block_height,json=lastIrreversibleBlockHeight,proto3" json:"last_irreversible_block_height,omitempty"`
	BestChainHash               *Hash             `protobuf:"bytes,9,opt,name=best_chain_hash,json=bestChainHash,proto3" json:"best_chain_hash,omitempty"`
	BestChainHeight             int64             `protobuf:"varint,10,opt,name=best_chain_height,json=bestChainHeight,proto3" json:"best_chain_height,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{13}
}

func (x *Chain) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chain) GetGenesisBlockHash() *Hash {
	if x != nil {
		return x.GenesisBlockHash
	}
	return nil
}

func (x *Chain) GetLongestChainHash() *Hash {
	if x != nil {
		return x.LongestChainHash
	}
	return nil
}

func (x *Chain) GetLongestChainHeight() int64 {
	if x != nil {
		return x.LongestChainHeight
	}
	return 0
}

func (x *Chain) GetBranches() map[string]int64 {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *Chain) GetNotLinkedBlocks() map[string]string {
	if x != nil {
		return x.NotLinkedBlocks
	}
	return nil
}

func (x *Chain) GetLastIrreversibleBlockHash() *Hash {
	if x != nil {
		return x.LastIrreversibleBlockHash
	}
	return nil
}

func (x *Chain) GetLastIrreversibleBlockHeight() int64 {
	if x != nil {
		return x.LastIrreversibleBlockHeight
	}
	return 0
}

func (x *Chain) GetBestChainHash() *Hash {
	if x != nil {
		return x.BestChainHash
	}
	return nil
}

func (x *Chain) GetBestChainHeight() int64 {
	if x != nil {
		return x.BestChainHeight
	}
	return 0
}

type ChainBlockIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash *Hash `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *ChainBlockIndex) Reset() {
	*x = ChainBlockIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainBlockIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainBlockIndex) ProtoMessage() {}

func (x *ChainBlockIndex) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainBlockIndex.ProtoReflect.Descriptor instead.
func (*ChainBlockIndex) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{14}
}

func (x *ChainBlockIndex) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type BlockIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash   *Hash `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight int64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *BlockIndex) Reset() {
	*x = BlockIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIndex) ProtoMessage() {}

func (x *BlockIndex) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIndex.ProtoReflect.Descriptor instead.
func (*BlockIndex) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{15}
}

func (x *BlockIndex) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockIndex) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type TransactionBlockIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash                       *Hash         `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight                     int64         `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PreviousExecutionBlockIndexList []*BlockIndex `protobuf:"bytes,3,rep,name=previous_execution_block_index_list,json=previousExecutionBlockIndexList,proto3" json:"previous_execution_block_index_list,omitempty"`
}

func (x *TransactionBlockIndex) Reset() {
	*x = TransactionBlockIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockIndex) ProtoMessage() {}

func (x *TransactionBlockIndex) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockIndex.ProtoReflect.Descriptor instead.
func (*TransactionBlockIndex) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{16}
}

func (x *TransactionBlockIndex) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *TransactionBlockIndex) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TransactionBlockIndex) GetPreviousExecutionBlockIndexList() []*BlockIndex {
	if x != nil {
		return x.PreviousExecutionBlockIndexList
	}
	return nil
}

type SmartContractAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash   *Hash    `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight int64    `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *SmartContractAddress) Reset() {
	*x = SmartContractAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_kernel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractAddress) ProtoMessage() {}

func (x *SmartContractAddress) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_kernel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractAddress.ProtoReflect.Descriptor instead.
func (*SmartContractAddress) Descriptor() ([]byte, []int) {
	return file_aelf_kernel_proto_rawDescGZIP(), []int{17}
}

func (x *SmartContractAddress) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SmartContractAddress) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *SmartContractAddress) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

var File_aelf_kernel_proto protoreflect.FileDescriptor

var file_aelf_kernel_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x65, 0x6c, 0x66, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x65, 0x6c, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x65, 0x6c, 0x66,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x70, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x05, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x13, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x12, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xdd, 0x05, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x52, 0x0a, 0x20, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x1c, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x1f, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x1a,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x26, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x21, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a,
	0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x48, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x22, 0x40, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x33, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3d,
	0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0xd9, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xbe, 0x01,
	0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc2,
	0x03, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x38, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x6e, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xb5, 0x05, 0x0a, 0x05, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x10, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a,
	0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6e,
	0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4b,
	0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x32, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x62, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x4e, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3c, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x5a, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x5e, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x1f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2a, 0x68, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xd4, 0x01,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1b, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a,
	0x17, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x50,
	0x4f, 0x53, 0x54, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x2a, 0x3e, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x45, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x48, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61,
	0x73, 0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61, 0x65, 0x6c, 0x66,
	0x2f, 0x70, 0x62, 0x2f, 0x61, 0x65, 0x6c, 0x66, 0x3b, 0x61, 0x65, 0x6c, 0x66, 0xaa, 0x02, 0x10,
	0x41, 0x45, 0x6c, 0x66, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2e, 0x50, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aelf_kernel_proto_rawDescOnce sync.Once
	file_aelf_kernel_proto_rawDescData = file_aelf_kernel_proto_rawDesc
)

func file_aelf_kernel_proto_rawDescGZIP() []byte {
	file_aelf_kernel_proto_rawDescOnce.Do(func() {
		file_aelf_kernel_proto_rawDescData = protoimpl.X.CompressGZIP(file_aelf_kernel_proto_rawDescData)
	})
	return file_aelf_kernel_proto_rawDescData
}

var file_aelf_kernel_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_aelf_kernel_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_aelf_kernel_proto_goTypes = []any{
	(TransactionStatus)(0),               // 0: aelf.TransactionStatus
	(ExecutionStatus)(0),                 // 1: aelf.ExecutionStatus
	(ChainStateMergingStatus)(0),         // 2: aelf.ChainStateMergingStatus
	(ChainBlockLinkExecutionStatus)(0),   // 3: aelf.ChainBlockLinkExecutionStatus
	(*StateValue)(nil),                   // 4: aelf.StateValue
	(*StateChange)(nil),                  // 5: aelf.StateChange
	(*TransactionTrace)(nil),             // 6: aelf.TransactionTrace
	(*ExecutionReturnSet)(nil),           // 7: aelf.ExecutionReturnSet
	(*BlockHeaderList)(nil),              // 8: aelf.BlockHeaderList
	(*BlockHeader)(nil),                  // 9: aelf.BlockHeader
	(*FirehoseBlockBody)(nil),            // 10: aelf.FirehoseBlockBody
	(*BlockBody)(nil),                    // 11: aelf.BlockBody
	(*Block)(nil),                        // 12: aelf.Block
	(*VersionedState)(nil),               // 13: aelf.VersionedState
	(*BlockStateSet)(nil),                // 14: aelf.BlockStateSet
	(*ChainStateInfo)(nil),               // 15: aelf.ChainStateInfo
	(*ChainBlockLink)(nil),               // 16: aelf.ChainBlockLink
	(*Chain)(nil),                        // 17: aelf.Chain
	(*ChainBlockIndex)(nil),              // 18: aelf.ChainBlockIndex
	(*BlockIndex)(nil),                   // 19: aelf.BlockIndex
	(*TransactionBlockIndex)(nil),        // 20: aelf.TransactionBlockIndex
	(*SmartContractAddress)(nil),         // 21: aelf.SmartContractAddress
	nil,                                  // 22: aelf.ExecutionReturnSet.StateChangesEntry
	nil,                                  // 23: aelf.ExecutionReturnSet.StateAccessesEntry
	nil,                                  // 24: aelf.ExecutionReturnSet.StateDeletesEntry
	nil,                                  // 25: aelf.BlockHeader.ExtraDataEntry
	nil,                                  // 26: aelf.BlockStateSet.ChangesEntry
	nil,                                  // 27: aelf.BlockStateSet.BlockExecutedDataEntry
	nil,                                  // 28: aelf.Chain.BranchesEntry
	nil,                                  // 29: aelf.Chain.NotLinkedBlocksEntry
	(*StatePath)(nil),                    // 30: aelf.StatePath
	(*Hash)(nil),                         // 31: aelf.Hash
	(*Transaction)(nil),                  // 32: aelf.Transaction
	(*LogEvent)(nil),                     // 33: aelf.LogEvent
	(*TransactionExecutingStateSet)(nil), // 34: aelf.TransactionExecutingStateSet
	(TransactionResultStatus)(0),         // 35: aelf.TransactionResultStatus
	(*TransactionResult)(nil),            // 36: aelf.TransactionResult
	(*timestamppb.Timestamp)(nil),        // 37: google.protobuf.Timestamp
	(*Address)(nil),                      // 38: aelf.Address
}
var file_aelf_kernel_proto_depIdxs = []int32{
	30, // 0: aelf.StateChange.state_path:type_name -> aelf.StatePath
	4,  // 1: aelf.StateChange.state_value:type_name -> aelf.StateValue
	31, // 2: aelf.TransactionTrace.transaction_id:type_name -> aelf.Hash
	32, // 3: aelf.TransactionTrace.pre_transactions:type_name -> aelf.Transaction
	6,  // 4: aelf.TransactionTrace.pre_traces:type_name -> aelf.TransactionTrace
	32, // 5: aelf.TransactionTrace.inline_transactions:type_name -> aelf.Transaction
	6,  // 6: aelf.TransactionTrace.inline_traces:type_name -> aelf.TransactionTrace
	32, // 7: aelf.TransactionTrace.post_transactions:type_name -> aelf.Transaction
	6,  // 8: aelf.TransactionTrace.post_traces:type_name -> aelf.TransactionTrace
	33, // 9: aelf.TransactionTrace.logs:type_name -> aelf.LogEvent
	1,  // 10: aelf.TransactionTrace.execution_status:type_name -> aelf.ExecutionStatus
	34, // 11: aelf.TransactionTrace.state_set:type_name -> aelf.TransactionExecutingStateSet
	31, // 12: aelf.ExecutionReturnSet.transaction_id:type_name -> aelf.Hash
	35, // 13: aelf.ExecutionReturnSet.status:type_name -> aelf.TransactionResultStatus
	22, // 14: aelf.ExecutionReturnSet.state_changes:type_name -> aelf.ExecutionReturnSet.StateChangesEntry
	23, // 15: aelf.ExecutionReturnSet.state_accesses:type_name -> aelf.ExecutionReturnSet.StateAccessesEntry
	24, // 16: aelf.ExecutionReturnSet.state_deletes:type_name -> aelf.ExecutionReturnSet.StateDeletesEntry
	36, // 17: aelf.ExecutionReturnSet.transaction_result:type_name -> aelf.TransactionResult
	9,  // 18: aelf.BlockHeaderList.headers:type_name -> aelf.BlockHeader
	31, // 19: aelf.BlockHeader.previous_block_hash:type_name -> aelf.Hash
	31, // 20: aelf.BlockHeader.merkle_tree_root_of_transactions:type_name -> aelf.Hash
	31, // 21: aelf.BlockHeader.merkle_tree_root_of_world_state:type_name -> aelf.Hash
	25, // 22: aelf.BlockHeader.extra_data:type_name -> aelf.BlockHeader.ExtraDataEntry
	37, // 23: aelf.BlockHeader.time:type_name -> google.protobuf.Timestamp
	31, // 24: aelf.BlockHeader.merkle_tree_root_of_transaction_status:type_name -> aelf.Hash
	31, // 25: aelf.BlockHeader.cached_block_hash:type_name -> aelf.Hash
	32, // 26: aelf.FirehoseBlockBody.transactions:type_name -> aelf.Transaction
	36, // 27: aelf.FirehoseBlockBody.trasanction_results:type_name -> aelf.TransactionResult
	6,  // 28: aelf.FirehoseBlockBody.transaction_traces:type_name -> aelf.TransactionTrace
	31, // 29: aelf.BlockBody.transaction_ids:type_name -> aelf.Hash
	9,  // 30: aelf.Block.header:type_name -> aelf.BlockHeader
	11, // 31: aelf.Block.body:type_name -> aelf.BlockBody
	10, // 32: aelf.Block.firehose_body:type_name -> aelf.FirehoseBlockBody
	31, // 33: aelf.VersionedState.block_hash:type_name -> aelf.Hash
	31, // 34: aelf.VersionedState.origin_block_hash:type_name -> aelf.Hash
	31, // 35: aelf.BlockStateSet.block_hash:type_name -> aelf.Hash
	31, // 36: aelf.BlockStateSet.previous_hash:type_name -> aelf.Hash
	26, // 37: aelf.BlockStateSet.changes:type_name -> aelf.BlockStateSet.ChangesEntry
	27, // 38: aelf.BlockStateSet.block_executed_data:type_name -> aelf.BlockStateSet.BlockExecutedDataEntry
	31, // 39: aelf.ChainStateInfo.block_hash:type_name -> aelf.Hash
	31, // 40: aelf.ChainStateInfo.merging_block_hash:type_name -> aelf.Hash
	2,  // 41: aelf.ChainStateInfo.status:type_name -> aelf.ChainStateMergingStatus
	31, // 42: aelf.ChainBlockLink.block_hash:type_name -> aelf.Hash
	31, // 43: aelf.ChainBlockLink.previous_block_hash:type_name -> aelf.Hash
	3,  // 44: aelf.ChainBlockLink.execution_status:type_name -> aelf.ChainBlockLinkExecutionStatus
	31, // 45: aelf.Chain.genesis_block_hash:type_name -> aelf.Hash
	31, // 46: aelf.Chain.longest_chain_hash:type_name -> aelf.Hash
	28, // 47: aelf.Chain.branches:type_name -> aelf.Chain.BranchesEntry
	29, // 48: aelf.Chain.not_linked_blocks:type_name -> aelf.Chain.NotLinkedBlocksEntry
	31, // 49: aelf.Chain.last_irreversible_block_hash:type_name -> aelf.Hash
	31, // 50: aelf.Chain.best_chain_hash:type_name -> aelf.Hash
	31, // 51: aelf.ChainBlockIndex.block_hash:type_name -> aelf.Hash
	31, // 52: aelf.BlockIndex.block_hash:type_name -> aelf.Hash
	31, // 53: aelf.TransactionBlockIndex.block_hash:type_name -> aelf.Hash
	19, // 54: aelf.TransactionBlockIndex.previous_execution_block_index_list:type_name -> aelf.BlockIndex
	38, // 55: aelf.SmartContractAddress.address:type_name -> aelf.Address
	31, // 56: aelf.SmartContractAddress.block_hash:type_name -> aelf.Hash
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_aelf_kernel_proto_init() }
func file_aelf_kernel_proto_init() {
	if File_aelf_kernel_proto != nil {
		return
	}
	file_aelf_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aelf_kernel_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionReturnSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BlockHeaderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FirehoseBlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*VersionedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BlockStateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ChainStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ChainBlockLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChainBlockIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BlockIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionBlockIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_kernel_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SmartContractAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aelf_kernel_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aelf_kernel_proto_goTypes,
		DependencyIndexes: file_aelf_kernel_proto_depIdxs,
		EnumInfos:         file_aelf_kernel_proto_enumTypes,
		MessageInfos:      file_aelf_kernel_proto_msgTypes,
	}.Build()
	File_aelf_kernel_proto = out.File
	file_aelf_kernel_proto_rawDesc = nil
	file_aelf_kernel_proto_goTypes = nil
	file_aelf_kernel_proto_depIdxs = nil
}
