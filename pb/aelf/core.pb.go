// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: aelf/core.proto

package aelf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionResultStatus int32

const (
	// The execution result of the transaction does not exist.
	TransactionResultStatus_NOT_EXISTED TransactionResultStatus = 0
	// The transaction is in the transaction pool waiting to be packaged.
	TransactionResultStatus_PENDING TransactionResultStatus = 1
	// Transaction execution failed.
	TransactionResultStatus_FAILED TransactionResultStatus = 2
	// The transaction was successfully executed and successfully packaged into a block.
	TransactionResultStatus_MINED TransactionResultStatus = 3
	// When executed in parallel, there are conflicts with other transactions.
	TransactionResultStatus_CONFLICT TransactionResultStatus = 4
	// The transaction is waiting for validation.
	TransactionResultStatus_PENDING_VALIDATION TransactionResultStatus = 5
	// Transaction validation failed.
	TransactionResultStatus_NODE_VALIDATION_FAILED TransactionResultStatus = 6
)

// Enum value maps for TransactionResultStatus.
var (
	TransactionResultStatus_name = map[int32]string{
		0: "NOT_EXISTED",
		1: "PENDING",
		2: "FAILED",
		3: "MINED",
		4: "CONFLICT",
		5: "PENDING_VALIDATION",
		6: "NODE_VALIDATION_FAILED",
	}
	TransactionResultStatus_value = map[string]int32{
		"NOT_EXISTED":            0,
		"PENDING":                1,
		"FAILED":                 2,
		"MINED":                  3,
		"CONFLICT":               4,
		"PENDING_VALIDATION":     5,
		"NODE_VALIDATION_FAILED": 6,
	}
)

func (x TransactionResultStatus) Enum() *TransactionResultStatus {
	p := new(TransactionResultStatus)
	*p = x
	return p
}

func (x TransactionResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aelf_core_proto_enumTypes[0].Descriptor()
}

func (TransactionResultStatus) Type() protoreflect.EnumType {
	return &file_aelf_core_proto_enumTypes[0]
}

func (x TransactionResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResultStatus.Descriptor instead.
func (TransactionResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{0}
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the sender of the transaction.
	From *Address `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// The address of the contract when calling a contract.
	To *Address `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// The height of the referenced block hash.
	RefBlockNumber int64 `protobuf:"varint,3,opt,name=ref_block_number,json=refBlockNumber,proto3" json:"ref_block_number,omitempty"`
	// The first four bytes of the referenced block hash.
	RefBlockPrefix []byte `protobuf:"bytes,4,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	// The name of a method in the smart contract at the To address.
	MethodName string `protobuf:"bytes,5,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// The parameters to pass to the smart contract method.
	Params []byte `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	// When signing a transaction itâ€™s actually a subset of the fields: from/to and the target method as well as
	// the parameter that were given. It also contains the reference block number and prefix.
	Signature []byte `protobuf:"bytes,10000,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetFrom() *Address {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Transaction) GetTo() *Address {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transaction) GetRefBlockNumber() int64 {
	if x != nil {
		return x.RefBlockNumber
	}
	return 0
}

func (x *Transaction) GetRefBlockPrefix() []byte {
	if x != nil {
		return x.RefBlockPrefix
	}
	return nil
}

func (x *Transaction) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *Transaction) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Transaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type StatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partial path of the state path.
	Parts []string `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *StatePath) Reset() {
	*x = StatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatePath) ProtoMessage() {}

func (x *StatePath) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatePath.ProtoReflect.Descriptor instead.
func (*StatePath) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{1}
}

func (x *StatePath) GetParts() []string {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ScopedStatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope address, which will be the contract address.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The path of contract state.
	Path *StatePath `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ScopedStatePath) Reset() {
	*x = ScopedStatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopedStatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopedStatePath) ProtoMessage() {}

func (x *ScopedStatePath) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopedStatePath.ProtoReflect.Descriptor instead.
func (*ScopedStatePath) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{2}
}

func (x *ScopedStatePath) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ScopedStatePath) GetPath() *StatePath {
	if x != nil {
		return x.Path
	}
	return nil
}

type TransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id.
	TransactionId *Hash `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The transaction result status.
	Status TransactionResultStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aelf.TransactionResultStatus" json:"status,omitempty"`
	// The log events.
	Logs []*LogEvent `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	// Bloom filter for transaction logs. A transaction log event can be defined in the contract and stored
	// in the bloom filter after the transaction is executed. Through this filter, we can quickly search for
	// and determine whether a log exists in the transaction result.
	Bloom []byte `protobuf:"bytes,4,opt,name=bloom,proto3" json:"bloom,omitempty"`
	// The return value of the transaction execution.
	ReturnValue []byte `protobuf:"bytes,5,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	// The height of the block hat packages the transaction.
	BlockNumber int64 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// The hash of the block hat packages the transaction.
	BlockHash *Hash `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Failed execution error message.
	Error string `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TransactionResult) Reset() {
	*x = TransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult) ProtoMessage() {}

func (x *TransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult.ProtoReflect.Descriptor instead.
func (*TransactionResult) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionResult) GetTransactionId() *Hash {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionResult) GetStatus() TransactionResultStatus {
	if x != nil {
		return x.Status
	}
	return TransactionResultStatus_NOT_EXISTED
}

func (x *TransactionResult) GetLogs() []*LogEvent {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TransactionResult) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *TransactionResult) GetReturnValue() []byte {
	if x != nil {
		return x.ReturnValue
	}
	return nil
}

func (x *TransactionResult) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TransactionResult) GetBlockHash() *Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *TransactionResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type InvalidTransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id.
	TransactionId *Hash `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The transaction result status.
	Status TransactionResultStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aelf.TransactionResultStatus" json:"status,omitempty"`
	// Failed execution error message.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InvalidTransactionResult) Reset() {
	*x = InvalidTransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidTransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidTransactionResult) ProtoMessage() {}

func (x *InvalidTransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidTransactionResult.ProtoReflect.Descriptor instead.
func (*InvalidTransactionResult) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidTransactionResult) GetTransactionId() *Hash {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *InvalidTransactionResult) GetStatus() TransactionResultStatus {
	if x != nil {
		return x.Status
	}
	return TransactionResultStatus_NOT_EXISTED
}

func (x *InvalidTransactionResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contract address.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The name of the log event.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The indexed data, used to calculate bloom.
	Indexed [][]byte `protobuf:"bytes,3,rep,name=indexed,proto3" json:"indexed,omitempty"`
	// The non indexed data.
	NonIndexed []byte `protobuf:"bytes,4,opt,name=non_indexed,json=nonIndexed,proto3" json:"non_indexed,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{5}
}

func (x *LogEvent) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LogEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogEvent) GetIndexed() [][]byte {
	if x != nil {
		return x.Indexed
	}
	return nil
}

func (x *LogEvent) GetNonIndexed() []byte {
	if x != nil {
		return x.NonIndexed
	}
	return nil
}

type SmartContractRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,1,opt,name=category,proto3" json:"category,omitempty"`
	// The byte array of the contract code.
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// The hash of the contract code.
	CodeHash *Hash `protobuf:"bytes,3,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// Whether it is a system contract.
	IsSystemContract bool `protobuf:"varint,4,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
	// The version of the current contract.
	Version int32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	// The version of the contract.
	ContractVersion string `protobuf:"bytes,6,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// The address of the current contract.
	ContractAddress *Address `protobuf:"bytes,7,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Indicates if the contract is the user contract.
	IsUserContract bool `protobuf:"varint,8,opt,name=is_user_contract,json=isUserContract,proto3" json:"is_user_contract,omitempty"`
}

func (x *SmartContractRegistration) Reset() {
	*x = SmartContractRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartContractRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractRegistration) ProtoMessage() {}

func (x *SmartContractRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractRegistration.ProtoReflect.Descriptor instead.
func (*SmartContractRegistration) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{6}
}

func (x *SmartContractRegistration) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *SmartContractRegistration) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SmartContractRegistration) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *SmartContractRegistration) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

func (x *SmartContractRegistration) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SmartContractRegistration) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *SmartContractRegistration) GetContractAddress() *Address {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *SmartContractRegistration) GetIsUserContract() bool {
	if x != nil {
		return x.IsUserContract
	}
	return false
}

type TransactionExecutingStateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The changed states.
	Writes map[string][]byte `protobuf:"bytes,1,rep,name=writes,proto3" json:"writes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The read states.
	Reads map[string]bool `protobuf:"bytes,2,rep,name=reads,proto3" json:"reads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The deleted states.
	Deletes map[string]bool `protobuf:"bytes,3,rep,name=deletes,proto3" json:"deletes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TransactionExecutingStateSet) Reset() {
	*x = TransactionExecutingStateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExecutingStateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExecutingStateSet) ProtoMessage() {}

func (x *TransactionExecutingStateSet) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExecutingStateSet.ProtoReflect.Descriptor instead.
func (*TransactionExecutingStateSet) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionExecutingStateSet) GetWrites() map[string][]byte {
	if x != nil {
		return x.Writes
	}
	return nil
}

func (x *TransactionExecutingStateSet) GetReads() map[string]bool {
	if x != nil {
		return x.Reads
	}
	return nil
}

func (x *TransactionExecutingStateSet) GetDeletes() map[string]bool {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{8}
}

func (x *Address) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{9}
}

func (x *Hash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SInt32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"zigzag32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SInt32Value) Reset() {
	*x = SInt32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SInt32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt32Value) ProtoMessage() {}

func (x *SInt32Value) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt32Value.ProtoReflect.Descriptor instead.
func (*SInt32Value) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{10}
}

func (x *SInt32Value) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SInt64Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SInt64Value) Reset() {
	*x = SInt64Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SInt64Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt64Value) ProtoMessage() {}

func (x *SInt64Value) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt64Value.ProtoReflect.Descriptor instead.
func (*SInt64Value) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{11}
}

func (x *SInt64Value) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MerklePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The merkle path nodes.
	MerklePathNodes []*MerklePathNode `protobuf:"bytes,1,rep,name=merkle_path_nodes,json=merklePathNodes,proto3" json:"merkle_path_nodes,omitempty"`
}

func (x *MerklePath) Reset() {
	*x = MerklePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePath) ProtoMessage() {}

func (x *MerklePath) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePath.ProtoReflect.Descriptor instead.
func (*MerklePath) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{12}
}

func (x *MerklePath) GetMerklePathNodes() []*MerklePathNode {
	if x != nil {
		return x.MerklePathNodes
	}
	return nil
}

type MerklePathNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node hash.
	Hash *Hash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Whether it is a left child node.
	IsLeftChildNode bool `protobuf:"varint,2,opt,name=is_left_child_node,json=isLeftChildNode,proto3" json:"is_left_child_node,omitempty"`
}

func (x *MerklePathNode) Reset() {
	*x = MerklePathNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathNode) ProtoMessage() {}

func (x *MerklePathNode) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathNode.ProtoReflect.Descriptor instead.
func (*MerklePathNode) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{13}
}

func (x *MerklePathNode) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MerklePathNode) GetIsLeftChildNode() bool {
	if x != nil {
		return x.IsLeftChildNode
	}
	return false
}

type BinaryMerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaf nodes.
	Nodes []*Hash `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The root node hash.
	Root *Hash `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// The count of leaf node.
	LeafCount int32 `protobuf:"varint,3,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
}

func (x *BinaryMerkleTree) Reset() {
	*x = BinaryMerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryMerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryMerkleTree) ProtoMessage() {}

func (x *BinaryMerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryMerkleTree.ProtoReflect.Descriptor instead.
func (*BinaryMerkleTree) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{14}
}

func (x *BinaryMerkleTree) GetNodes() []*Hash {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *BinaryMerkleTree) GetRoot() *Hash {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *BinaryMerkleTree) GetLeafCount() int32 {
	if x != nil {
		return x.LeafCount
	}
	return 0
}

type BigIntValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BigIntValue) Reset() {
	*x = BigIntValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aelf_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigIntValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigIntValue) ProtoMessage() {}

func (x *BigIntValue) ProtoReflect() protoreflect.Message {
	mi := &file_aelf_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigIntValue.ProtoReflect.Descriptor instead.
func (*BigIntValue) Descriptor() ([]byte, []int) {
	return file_aelf_core_proto_rawDescGZIP(), []int{15}
}

func (x *BigIntValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_aelf_core_proto protoreflect.FileDescriptor

var file_aelf_core_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x65, 0x6c, 0x66, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x61, 0x65, 0x6c, 0x66, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x31, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x4c,
	0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x22, 0xcb, 0x02, 0x0a,
	0x19, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xa7, 0x03, 0x0a, 0x1c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a,
	0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x11, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5d, 0x0a,
	0x0e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c,
	0x65, 0x66, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x10,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x90, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x42, 0x48, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61,
	0x65, 0x6c, 0x66, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x65, 0x6c, 0x66, 0x3b, 0x61, 0x65, 0x6c, 0x66,
	0xaa, 0x02, 0x10, 0x41, 0x45, 0x6c, 0x66, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65,
	0x2e, 0x50, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aelf_core_proto_rawDescOnce sync.Once
	file_aelf_core_proto_rawDescData = file_aelf_core_proto_rawDesc
)

func file_aelf_core_proto_rawDescGZIP() []byte {
	file_aelf_core_proto_rawDescOnce.Do(func() {
		file_aelf_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_aelf_core_proto_rawDescData)
	})
	return file_aelf_core_proto_rawDescData
}

var file_aelf_core_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aelf_core_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_aelf_core_proto_goTypes = []any{
	(TransactionResultStatus)(0),         // 0: aelf.TransactionResultStatus
	(*Transaction)(nil),                  // 1: aelf.Transaction
	(*StatePath)(nil),                    // 2: aelf.StatePath
	(*ScopedStatePath)(nil),              // 3: aelf.ScopedStatePath
	(*TransactionResult)(nil),            // 4: aelf.TransactionResult
	(*InvalidTransactionResult)(nil),     // 5: aelf.InvalidTransactionResult
	(*LogEvent)(nil),                     // 6: aelf.LogEvent
	(*SmartContractRegistration)(nil),    // 7: aelf.SmartContractRegistration
	(*TransactionExecutingStateSet)(nil), // 8: aelf.TransactionExecutingStateSet
	(*Address)(nil),                      // 9: aelf.Address
	(*Hash)(nil),                         // 10: aelf.Hash
	(*SInt32Value)(nil),                  // 11: aelf.SInt32Value
	(*SInt64Value)(nil),                  // 12: aelf.SInt64Value
	(*MerklePath)(nil),                   // 13: aelf.MerklePath
	(*MerklePathNode)(nil),               // 14: aelf.MerklePathNode
	(*BinaryMerkleTree)(nil),             // 15: aelf.BinaryMerkleTree
	(*BigIntValue)(nil),                  // 16: aelf.BigIntValue
	nil,                                  // 17: aelf.TransactionExecutingStateSet.WritesEntry
	nil,                                  // 18: aelf.TransactionExecutingStateSet.ReadsEntry
	nil,                                  // 19: aelf.TransactionExecutingStateSet.DeletesEntry
}
var file_aelf_core_proto_depIdxs = []int32{
	9,  // 0: aelf.Transaction.from:type_name -> aelf.Address
	9,  // 1: aelf.Transaction.to:type_name -> aelf.Address
	9,  // 2: aelf.ScopedStatePath.address:type_name -> aelf.Address
	2,  // 3: aelf.ScopedStatePath.path:type_name -> aelf.StatePath
	10, // 4: aelf.TransactionResult.transaction_id:type_name -> aelf.Hash
	0,  // 5: aelf.TransactionResult.status:type_name -> aelf.TransactionResultStatus
	6,  // 6: aelf.TransactionResult.logs:type_name -> aelf.LogEvent
	10, // 7: aelf.TransactionResult.block_hash:type_name -> aelf.Hash
	10, // 8: aelf.InvalidTransactionResult.transaction_id:type_name -> aelf.Hash
	0,  // 9: aelf.InvalidTransactionResult.status:type_name -> aelf.TransactionResultStatus
	9,  // 10: aelf.LogEvent.address:type_name -> aelf.Address
	10, // 11: aelf.SmartContractRegistration.code_hash:type_name -> aelf.Hash
	9,  // 12: aelf.SmartContractRegistration.contract_address:type_name -> aelf.Address
	17, // 13: aelf.TransactionExecutingStateSet.writes:type_name -> aelf.TransactionExecutingStateSet.WritesEntry
	18, // 14: aelf.TransactionExecutingStateSet.reads:type_name -> aelf.TransactionExecutingStateSet.ReadsEntry
	19, // 15: aelf.TransactionExecutingStateSet.deletes:type_name -> aelf.TransactionExecutingStateSet.DeletesEntry
	14, // 16: aelf.MerklePath.merkle_path_nodes:type_name -> aelf.MerklePathNode
	10, // 17: aelf.MerklePathNode.hash:type_name -> aelf.Hash
	10, // 18: aelf.BinaryMerkleTree.nodes:type_name -> aelf.Hash
	10, // 19: aelf.BinaryMerkleTree.root:type_name -> aelf.Hash
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_aelf_core_proto_init() }
func file_aelf_core_proto_init() {
	if File_aelf_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aelf_core_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ScopedStatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InvalidTransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SmartContractRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionExecutingStateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SInt32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SInt64Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MerklePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MerklePathNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BinaryMerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aelf_core_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BigIntValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aelf_core_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aelf_core_proto_goTypes,
		DependencyIndexes: file_aelf_core_proto_depIdxs,
		EnumInfos:         file_aelf_core_proto_enumTypes,
		MessageInfos:      file_aelf_core_proto_msgTypes,
	}.Build()
	File_aelf_core_proto = out.File
	file_aelf_core_proto_rawDesc = nil
	file_aelf_core_proto_goTypes = nil
	file_aelf_core_proto_depIdxs = nil
}
